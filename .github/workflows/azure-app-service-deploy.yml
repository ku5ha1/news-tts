name: Deploy to VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # VM Configuration
  VM_HOST: ${{ secrets.VM_HOST }}
  VM_USERNAME: ${{ secrets.VM_USERNAME }}
  IMAGE_NAME: news-tts
  
  # Non-sensitive defaults
  HF_HOME: /home/app/.cache/huggingface
  HF_HUB_CACHE: /home/app/.cache/huggingface/hub
  HF_HUB_OFFLINE: 0
  TRUST_REMOTE_CODE: 1
  TRANSLATION_PER_CALL_TIMEOUT: 90
  TRANSLATION_PER_CALL_TIMEOUT_RETRY: 120
  LOG_LEVEL: info
  PORT: 8080
  PYTHONUNBUFFERED: 1

  # Secrets from GitHub repository
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
  ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
  FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
  FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
  MONGO_URI: ${{ secrets.MONGO_URI }}
  CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  
  # Azure Blob Storage
  AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
  AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
  AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
  AZURE_STORAGE_AUDIOFIELD_CONTAINER: ${{ secrets.AZURE_STORAGE_AUDIOFIELD_CONTAINER }}
  AZURE_STORAGE_MAGAZINE_CONTAINER: ${{ secrets.AZURE_STORAGE_MAGAZINE_CONTAINER }}
  AZURE_STORAGE_MAGAZINE2_CONTAINER: ${{ secrets.AZURE_STORAGE_MAGAZINE2_CONTAINER }}
  
  # SSL Certificates
  SSL_CERT: ${{ secrets.SSL_CERT }}
  SSL_KEY: ${{ secrets.SSL_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        key: ${{ secrets.VM_SSH_KEY }}
        envs: DATABASE_NAME,ELEVENLABS_API_KEY,ELEVENLABS_VOICE_ID,FIREBASE_SERVICE_ACCOUNT_BASE64,FIREBASE_STORAGE_BUCKET,MONGO_URI,CORS_ORIGIN,AZURE_STORAGE_ACCOUNT_NAME,AZURE_STORAGE_CONNECTION_STRING,AZURE_STORAGE_ACCESS_KEY,AZURE_STORAGE_AUDIOFIELD_CONTAINER,AZURE_STORAGE_MAGAZINE_CONTAINER,AZURE_STORAGE_MAGAZINE2_CONTAINER,HF_HOME,HF_HUB_CACHE,HF_HUB_OFFLINE,TRUST_REMOTE_CODE,LOG_LEVEL,PORT,PYTHONUNBUFFERED,JWT_SECRET,SSL_CERT,SSL_KEY
        script: |
          # Navigate to project directory
          cd ~/news-tts
          
          # Setup SSL certificates
          echo "Setting up SSL certificates..."
          sudo mkdir -p /etc/letsencrypt/live/api.digi9.com.au/
          sudo mkdir -p /etc/letsencrypt/archive/api.digi9.com.au/
          
          # Write certificate files to archive directory
          echo "$SSL_CERT" | sudo tee /etc/letsencrypt/archive/api.digi9.com.au/fullchain1.pem > /dev/null
          echo "$SSL_KEY" | sudo tee /etc/letsencrypt/archive/api.digi9.com.au/privkey1.pem > /dev/null
          
          # Create symlinks
          sudo ln -sf ../../archive/api.digi9.com.au/fullchain1.pem /etc/letsencrypt/live/api.digi9.com.au/fullchain.pem
          sudo ln -sf ../../archive/api.digi9.com.au/privkey1.pem /etc/letsencrypt/live/api.digi9.com.au/privkey.pem
          
          # Set proper permissions
          sudo chmod 600 /etc/letsencrypt/archive/api.digi9.com.au/privkey1.pem
          sudo chmod 644 /etc/letsencrypt/archive/api.digi9.com.au/fullchain1.pem
          sudo chmod 600 /etc/letsencrypt/live/api.digi9.com.au/privkey.pem
          sudo chmod 644 /etc/letsencrypt/live/api.digi9.com.au/fullchain.pem
          
          echo "SSL certificates setup complete!"
          
          # Stash local changes and pull latest changes
          git stash || true
          git pull origin main
          
          # Stop existing container
          docker stop news-tts-container || true
          docker rm news-tts-container || true
          
          # Clean up Docker to free space
          docker system prune -a -f --volumes || true
          docker builder prune -a -f || true
          docker image prune -a -f || true
          docker container prune -f || true
          docker network prune -f || true
          
          # Clean up system space
          sudo apt clean || true
          sudo apt autoremove -y || true
          sudo rm -rf /tmp/* /var/tmp/* || true
          
          # Clear Docker build cache and build new image
          docker builder prune -a -f || true
          echo "Starting optimized Docker build..."
          docker build -t news-tts . --no-cache --pull
          
          # Run new container with environment variables and SSL certificates
          docker run -d -p 443:443 -p 8080:8080 --name news-tts-container --user root \
            -v /etc/letsencrypt:/etc/letsencrypt:ro \
            -e HF_HOME="$HF_HOME" \
            -e HF_HUB_CACHE="$HF_HUB_CACHE" \
            -e HF_HUB_OFFLINE="$HF_HUB_OFFLINE" \
            -e TRUST_REMOTE_CODE="$TRUST_REMOTE_CODE" \
            -e LOG_LEVEL="$LOG_LEVEL" \
            -e PORT="$PORT" \
            -e PYTHONUNBUFFERED="$PYTHONUNBUFFERED" \
            -e DATABASE_NAME="$DATABASE_NAME" \
            -e ELEVENLABS_API_KEY="$ELEVENLABS_API_KEY" \
            -e ELEVENLABS_VOICE_ID="$ELEVENLABS_VOICE_ID" \
            -e FIREBASE_SERVICE_ACCOUNT_BASE64="$FIREBASE_SERVICE_ACCOUNT_BASE64" \
            -e FIREBASE_STORAGE_BUCKET="$FIREBASE_STORAGE_BUCKET" \
            -e MONGO_URI="$MONGO_URI" \
            -e CORS_ORIGIN="$CORS_ORIGIN" \
            -e AZURE_STORAGE_ACCOUNT_NAME="$AZURE_STORAGE_ACCOUNT_NAME" \
            -e AZURE_STORAGE_CONNECTION_STRING="$AZURE_STORAGE_CONNECTION_STRING" \
            -e AZURE_STORAGE_ACCESS_KEY="$AZURE_STORAGE_ACCESS_KEY" \
            -e AZURE_STORAGE_AUDIOFIELD_CONTAINER="$AZURE_STORAGE_AUDIOFIELD_CONTAINER" \
            -e AZURE_STORAGE_MAGAZINE_CONTAINER="$AZURE_STORAGE_MAGAZINE_CONTAINER" \
            -e AZURE_STORAGE_MAGAZINE2_CONTAINER="$AZURE_STORAGE_MAGAZINE2_CONTAINER" \
            -e JWT_SECRET="$JWT_SECRET" \
            news-tts
          
          # Wait for container to start
          sleep 10
          
          # Debug container status
          echo "=== Container Status ==="
          docker ps -a
          echo "=== Container Logs ==="
          docker logs news-tts-container
          echo "=== Container Processes ==="
          docker exec news-tts-container ps aux || echo "Cannot exec into container"
          
          # Check health
          echo "Testing HTTP health check..."
          curl -f http://localhost:8080/health || echo "HTTP health check failed"
          
          echo "Testing HTTPS health check..."
          curl -f https://localhost:443/health || echo "HTTPS health check failed"
          
          # Final health check - try both
          if curl -f http://localhost:8080/health 2>/dev/null || curl -f https://localhost:443/health 2>/dev/null; then
            echo "Health check passed!"
          else
            echo "Health check failed - checking container logs"
            docker logs news-tts-container --tail 50
            exit 1
          fi
          
          echo "Deployment successful!"
          echo "HTTP App URL: http://${{ secrets.VM_HOST }}:8080"
          echo "HTTPS App URL: https://api.digi9.com.au"
          echo "HTTP Health Check: http://${{ secrets.VM_HOST }}:8080/health"
          echo "HTTPS Health Check: https://api.digi9.com.au/health"
