name: Deploy to Azure App Service

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # Azure Configuration
  AZURE_WEBAPP_NAME: news-tts-app
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  REGISTRY_NAME: ${{ vars.ACR_NAME }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  
  # App Service Configuration
  WEBSITES_MOUNT_ENABLED: 0
  WEBSITES_MOUNT_PATH: ""
  WEBSITES_PORT: 8080
  
  # Environment Variables - Consistent across all files
  HF_HOME: /app/hf-cache
  TRANSFORMERS_CACHE: /app/hf-cache
  HF_HUB_OFFLINE: 1
  TRUST_REMOTE_CODE: 1
  LOG_LEVEL: INFO
  PORT: 8080
  PYTHONUNBUFFERED: 1
  
  # Service Configuration
  TRANSLATION_PER_CALL_TIMEOUT: 90
  TRANSLATION_PER_CALL_TIMEOUT_RETRY: 120

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

    - name: Create App Service (if not exists)
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Check if App Service exists
          if ! az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Creating App Service..."
            az webapp create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --plan ${{ env.RESOURCE_GROUP }}-plan \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --deployment-container-image-name ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          else
            echo "App Service already exists"
          fi

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        resource-group: ${{ env.RESOURCE_GROUP }}
        images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Configure App Service Settings
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Set environment variables
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --settings \
              WEBSITES_MOUNT_ENABLED="${{ env.WEBSITES_MOUNT_ENABLED }}" \
              WEBSITES_MOUNT_PATH="${{ env.WEBSITES_MOUNT_PATH }}" \
              WEBSITES_PORT="${{ env.WEBSITES_PORT }}" \
              HF_HOME="${{ env.HF_HOME }}" \
              TRANSFORMERS_CACHE="${{ env.TRANSFORMERS_CACHE }}" \
              HF_HUB_OFFLINE="${{ env.HF_HUB_OFFLINE }}" \
              TRUST_REMOTE_CODE="${{ env.TRUST_REMOTE_CODE }}" \
              LOG_LEVEL="${{ env.LOG_LEVEL }}" \
              PORT="${{ env.PORT }}" \
              PYTHONUNBUFFERED="${{ env.PYTHONUNBUFFERED }}" \
              TRANSLATION_PER_CALL_TIMEOUT="${{ env.TRANSLATION_PER_CALL_TIMEOUT }}" \
              TRANSLATION_PER_CALL_TIMEOUT_RETRY="${{ env.TRANSLATION_PER_CALL_TIMEOUT_RETRY }}" \
              ELEVENLABS_API_KEY="${{ secrets.ELEVENLABS_API_KEY }}" \
              ELEVENLABS_VOICE_ID="${{ secrets.ELEVENLABS_VOICE_ID }}" \
              MONGO_URI="${{ secrets.MONGO_URI }}" \
              DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
              FIREBASE_SERVICE_ACCOUNT_BASE64="${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" \
              FIREBASE_STORAGE_BUCKET="${{ secrets.FIREBASE_STORAGE_BUCKET }}" \
              CORS_ORIGIN="${{ secrets.CORS_ORIGIN }}"

    - name: Get App Service URL
      uses: azure/CLI@v1
      with:
        inlineScript: |
          APP_URL=$(az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "defaultHostName" -o tsv)
          echo "App Service URL: https://$APP_URL"
          echo "Health Check: https://$APP_URL/health"

    - name: Wait for deployment
      run: |
        echo "Waiting for App Service to start..."
        sleep 30

    - name: Test deployment
      run: |
        APP_URL=$(az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "defaultHostName" -o tsv)
        echo "Testing health endpoint: https://$APP_URL/health"
        curl -f "https://$APP_URL/health" || echo "Health check failed - check App Service logs"
