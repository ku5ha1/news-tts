name: Build and Deploy to Azure Container Registry

on:
  push:
    branches:
      - main  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      # Non-sensitive defaults
      HF_HOME: /app/.cache/huggingface
      HF_HUB_CACHE: /app/.cache/huggingface/hub
      TRANSFORMERS_CACHE: /app/.cache/huggingface/transformers
      HF_HUB_OFFLINE: 0
      TRUST_REMOTE_CODE: 1
      TRANSLATION_PER_CALL_TIMEOUT: 90
      TRANSLATION_PER_CALL_TIMEOUT_RETRY: 120
      LOG_LEVEL: INFO

      # Secrets from GitHub repository
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
      FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
      FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
      ACR_NAME: ${{ secrets.ACR_NAME }} 
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Build and push Docker image
        run: |
          IMAGE=$ACR_NAME.azurecr.io/$IMAGE_NAME:latest
          echo "Building and pushing image: $IMAGE"
          docker build --no-cache -t $IMAGE .
          docker push $IMAGE
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Get ACR credentials
        run: |
          ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query username --output tsv)
          ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query passwords[0].value --output tsv)
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV

      - name: Redeploy container instance
        run: |
          echo "Checking for existing container..."
          EXISTS=$(az container show --name news-tts-container --resource-group "$RESOURCE_GROUP" --query "name" -o tsv || true)
          if [ -n "$EXISTS" ]; then
            echo "Container exists. Deleting..."
            az container delete --name news-tts-container --resource-group "$RESOURCE_GROUP" --yes

            # Poll until deleted
            for i in {1..30}; do
              EXISTS=$(az container show --name news-tts-container --resource-group "$RESOURCE_GROUP" --query "name" -o tsv || true)
              if [ -z "$EXISTS" ]; then
                echo "Container deleted."
                break
              fi
              echo "Waiting for container deletion... ($i/30)"
              sleep 5
            done
          fi

          echo "Creating new Azure Container Instance with SMB mount..."
          az container create \
            --resource-group "$RESOURCE_GROUP" \
            --name news-tts-container \
            --image "$ACR_NAME.azurecr.io/$IMAGE_NAME:latest" \
            --cpu 2 \
            --memory 14 \
            --ports 8080 \
            --os-type Linux \
            --ip-address Public \
            --dns-name-label news-tts-app \
            --registry-username "$ACR_USERNAME" \
            --registry-password "$ACR_PASSWORD" \
            --environment-variables \
              ELEVENLABS_API_KEY="$ELEVENLABS_API_KEY" \
              ELEVENLABS_VOICE_ID="$ELEVENLABS_VOICE_ID" \
              MONGO_URI="$MONGO_URI" \
              DATABASE_NAME="$DATABASE_NAME" \
              FIREBASE_SERVICE_ACCOUNT_BASE64="$FIREBASE_SERVICE_ACCOUNT_BASE64" \
              FIREBASE_STORAGE_BUCKET="$FIREBASE_STORAGE_BUCKET" \
              CORS_ORIGIN="$CORS_ORIGIN" \
              LOG_LEVEL="$LOG_LEVEL" \
              HF_HOME=/mnt/hf-cache \
              HF_HUB_CACHE=/mnt/hf-cache/hub \
              TRANSFORMERS_CACHE=/mnt/hf-cache/transformers \
            --azure-file-volume-account-name diprstorage \
            --azure-file-volume-account-key "$STORAGE_ACCOUNT_KEY" \
            --azure-file-volume-share-name hf-cache \
            --azure-file-volume-mount-path /mnt/hf-cache \
            --restart-policy Always \
            --no-wait



      - name: Get container public IP
        run: |
          echo "Waiting for container public IP..."
          for i in {1..15}; do
            CONTAINER_IP=$(az container show \
              --name news-tts-container \
              --resource-group "$RESOURCE_GROUP" \
              --query "ipAddress.ip" -o tsv 2>/dev/null || true)
            if [ -n "$CONTAINER_IP" ]; then
              echo "Container IP found: $CONTAINER_IP"
              echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_ENV
              break
            fi
            echo "Waiting for IP... ($i/15)"
            sleep 10
          done

      - name: Output endpoint info
        run: |
          echo "Container IP: $CONTAINER_IP"
          echo "Health Check: http://$CONTAINER_IP:8080/health"
          echo "API Docs: http://$CONTAINER_IP:8080/docs"
